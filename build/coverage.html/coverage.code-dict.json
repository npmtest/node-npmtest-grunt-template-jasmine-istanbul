{"/home/travis/build/npmtest/node-npmtest-grunt-template-jasmine-istanbul/test.js":"/* istanbul instrument in package npmtest_grunt_template_jasmine_istanbul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-template-jasmine-istanbul/lib.npmtest_grunt_template_jasmine_istanbul.js":"/* istanbul instrument in package npmtest_grunt_template_jasmine_istanbul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_template_jasmine_istanbul = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_template_jasmine_istanbul = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-template-jasmine-istanbul/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-template-jasmine-istanbul && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_template_jasmine_istanbul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_template_jasmine_istanbul\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_template_jasmine_istanbul.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_template_jasmine_istanbul.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_template_jasmine_istanbul.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_template_jasmine_istanbul.__dirname + '/lib.npmtest_grunt_template_jasmine_istanbul.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-template-jasmine-istanbul/node_modules/grunt-template-jasmine-istanbul/src/main/js/template.js":"/**\n * Code coverage via istanbul.\n *\n * @module grunt-template-jasmine-istanbul\n * @class template\n */\nvar path = require('path');\nvar istanbul = require('istanbul');\nvar grunt = require('grunt');\nvar lodashTemplate = require('lodash.template');\n\nvar REPORTER = __dirname + '/reporter.js';\nvar TMP_REPORTER = 'grunt-template-jasmine-istanbul/reporter.js';\nvar DEFAULT_TEMPLATE = __dirname + '/../../../../grunt-contrib-jasmine/tasks/'\n\t\t+ 'jasmine/templates/DefaultRunner.tmpl';\n\n/**\n * Gets an URI from a file path. Accounts for Windows paths.\n *\n * @method getUri\n *\n * @param {String} file The file path\n *\n * @return {String} The URI for the specified file path\n */\nvar getUri = function (file) {\n\treturn file.replace(/\\\\{1,2}/g, '/');\n};\n\n/**\n * Instruments the specified source and moves the instrumented source to the\n * temporary location, recreating the original directory structure.\n *\n * @private\n * @method instrument\n *\n * @param {String} source The path of the original source\n * @param {String} tmp The path to the temporary directory\n *\n * @return {String} The path to the instrumented source\n */\nvar instrument = function (source, tmp) {\n\tvar instrumenter = new istanbul.Instrumenter();\n\tvar instrumentedSourceText = instrumenter.instrumentSync(\n\t\t\tgrunt.file.read(source), source);\n\tvar instrumentedSource = source;\n\t// don't try to write \"C:\" as part of a folder name on Windows\n\tif (process.platform === 'win32') {\n\t\tinstrumentedSource = instrumentedSource.replace(/^([a-z]):/i, '$1');\n\t}\n\tinstrumentedSource = path.join(tmp, instrumentedSource);\n\tgrunt.file.write(instrumentedSource, instrumentedSourceText);\n\treturn instrumentedSource;\n};\n\n/**\n * Writes the coverage file.\n *\n * @private\n * @method writeCoverage\n *\n * @param {Object} coverage The coverage data\n * @param {String} file The path to the coverage file\n * @return {void}\n */\nvar writeCoverage = function (coverage, file) {\n\tgrunt.file.write(file, JSON.stringify(coverage));\n};\n\n/**\n * Writes the report of the specified type, using the specified options and\n * reporting the coverage collected by the specified collector.\n *\n * @private\n * @method writeReport\n *\n * @param {String} type The report type\n * @param {Object} options The report options\n * @param {Collector} collector The collector containing the coverage\n * @return {void}\n */\nvar writeReport = function (type, options, collector) {\n\tistanbul.Report.create(type, options).writeReport(collector, true);\n};\n\n/**\n * Writes the istanbul reports created from the specified options.\n *\n * @private\n * @method writeReports\n *\n * @param {Collector} collector The collector containing the coverage\n * @param {Object} options The options describing the reports\n * @return {void}\n */\nvar writeReports = function (collector, options) {\n\tif (typeof options === 'string' || options instanceof String) {\n\t\t// default to html report at options directory\n\t\twriteReport('html', {\n\t\t\tdir: options\n\t\t}, collector);\n\t} else if (options instanceof Array) {\n\t\t// multiple reports\n\t\tfor (var i = 0; i < options.length; i = i + 1) {\n\t\t\tvar report = options[i];\n\t\t\twriteReport(report.type, report.options, collector);\n\t\t}\n\t} else {\n\t\t// single report\n\t\twriteReport(options.type, options.options, collector);\n\t}\n};\n\n/**\n * Checks whether the specified threshold options have been met. Issues a\n * warning if not.\n *\n * @param {Collector} collector The collector containing the coverage\n * @param {Object} options The options describing the thresholds\n * @return {void}\n */\nvar checkThresholds = function (collector, options) {\n\tvar summaries = [];\n\tcollector.files().forEach(function (file) {\n\t\tsummaries.push(istanbul.utils.summarizeFileCoverage(\n\t\t\t\tcollector.fileCoverageFor(file)));\n\t});\n\tvar finalSummary = istanbul.utils.mergeSummaryObjects.apply(null,\n\t\t\tsummaries);\n\tObject.keys(options).forEach(function (metric) {\n\t\tvar threshold = options[metric];\n\t\tvar actual = finalSummary[metric];\n\t\tif (!actual) {\n\t\t\tgrunt.warn('unrecognized metric: ' + metric);\n\t\t}\n\t\tif (actual.pct < threshold) {\n\t\t\tgrunt.warn('expected ' + metric + ' coverage to be at least '\n\t\t\t\t\t+ threshold + '% but was ' + actual.pct + '%');\n\t\t}\n\t});\n};\n\n/**\n * Processes the mixed-in template. Defaults to jasmine's default template and\n * sets up the context using the mixed-in template's options.\n *\n * @private\n * @method processMixedInTemplate\n *\n * @param {Object} grunt The grunt object\n * @param {Object} task Provides utility methods to register listeners and\n *\t   handle temporary files\n * @param {Object} context Contains all options\n *\n * @return {String} The template HTML source of the mixed in template\n */\nvar processMixedInTemplate = function (grunt, task, context) {// eslint-disable-line no-shadow\n\tvar template = context.options.template;\n\tif (!template) {\n\t\ttemplate = DEFAULT_TEMPLATE;\n\t}\n\t// clone context\n\tvar mixedInContext = JSON.parse(JSON.stringify(context));\n\t// transit templateOptions\n\tmixedInContext.options = context.options.templateOptions || {};\n\tif (template.process) {\n\t\treturn template.process(grunt, task, mixedInContext);\n\t} else {\n\t\treturn lodashTemplate(grunt.file.read(template))(mixedInContext);\n\t}\n};\n\n/**\n * Instruments the sources, generates reports and cleans up after tests.\n *\n * @method process\n *\n * @param {Object} grunt The grunt object\n * @param {Object} task Provides utility methods to register listeners and\n *\t   handle temporary files\n * @param {Object} context Contains all options\n *\n * @return {String} The template HTML source\n */\nexports.process = function (grunt, task, context) {// eslint-disable-line no-shadow\n\tvar outputDirectory = path.dirname(context.outfile);\n\t// prepend coverage reporter\n\tvar tmpReporter = path.join(context.temp, TMP_REPORTER);\n\tgrunt.file.copy(REPORTER, tmpReporter);\n\tcontext.scripts.reporters.unshift(getUri(path.relative(outputDirectory,\n\t\ttmpReporter)));\n\t// instrument sources\n\tvar files = context.options.files || '**/*';\n\tvar replacements = [];\n\tcontext.scripts.src.forEach(function (source) {\n\t\tvar instrumentedSource = path.join(outputDirectory, source);\n\t\tif (!grunt.file.isMatch(files, instrumentedSource)) {\n\t\t\treturn;\n\t\t}\n\t\tinstrumentedSource = instrument(instrumentedSource, context.temp);\n\t\tinstrumentedSource = getUri(path.relative(outputDirectory,\n\t\t\t\tinstrumentedSource));\n\t\treplacements.push({\n\t\t\tfrom: source,\n\t\t\tto: instrumentedSource\n\t\t});\n\t});\n\t// replace sources\n\tif (typeof context.options.replace === 'function') {\n\t\treplacements.forEach(function (replacement) {\n\t\t\t// call replace with the original and the instrumented source paths\n\t\t\treplacement.to = context.options.replace(replacement.to,\n\t\t\t\t\treplacement.from);\n\t\t});\n\t}\n\tif (context.options.replace !== false) {\n\t\t// replace instrumented sources and keep uninstrumented\n\t\tcontext.scripts.src = context.scripts.src.map(function (source) {\n\t\t\tvar instrumentedSource = null;\n\t\t\treplacements.forEach(function (replacement) {\n\t\t\t\tif (replacement.from === source) {\n\t\t\t\t\tinstrumentedSource = replacement.to;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (instrumentedSource) {\n\t\t\t\treturn instrumentedSource;\n\t\t\t}\n\t\t\treturn source;\n\t\t});\n\t}\n\t// listen to coverage event dispatched by reporter\n\ttask.phantomjs.on('jasmine.coverage', function (coverage) {\n\t\tvar collector = new istanbul.Collector();\n\t\tcollector.add(coverage);\n\t\twriteCoverage(coverage, context.options.coverage);\n\t\twriteReports(collector, context.options.report);\n\t\tif (context.options.thresholds) {\n\t\t\tcheckThresholds(collector, context.options.thresholds);\n\t\t}\n\t});\n\t// process mixed-in template\n\treturn processMixedInTemplate(grunt, task, context);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-template-jasmine-istanbul/node_modules/grunt-template-jasmine-istanbul/Gruntfile.js":"module.exports = function(grunt) {\n\tgrunt.initConfig({\n\t\tmeta: {\n\t\t\tpackage: grunt.file.readJSON('package.json'),\n\t\t\tsrc: {\n\t\t\t\tmain: 'src/main',\n\t\t\t\ttest: 'src/test',\n\t\t\t},\n\t\t\tbin: {\n\t\t\t\tcoverage: 'bin/coverage'\n\t\t\t},\n\t\t\ttemp: {\n\t\t\t\tintegration: '.grunt/integration',\n\t\t\t\toutfile: '.grunt/outfile'\n\t\t\t},\n\t\t\tdoc: 'doc'\n\t\t},\n\t\t// test template functionality\n\t\tnodeunit: {\n\t\t\ttemplate: '<%= meta.src.test %>/js/template.js',\n\t\t\treporter: '<%= meta.src.test %>/js/reporter.js',\n\t\t\tintegration: '<%= meta.src.test %>/js/integration.js',\n\t\t\toutfile: '<%= meta.src.test %>/js/outfile.js',\n\t\t\tthreshold: '<%= meta.src.test %>/js/threshold.js'\n\t\t},\n\t\tjasmine: {\n\t\t\t// test common use-case\n\t\t\tintegration: {\n\t\t\t\tsrc: ['<%= meta.src.test %>/js/Generator.js'],\n\t\t\t\toptions: {\n\t\t\t\t\tspecs: ['<%= meta.src.test %>/js/GeneratorTest.js'],\n\t\t\t\t\ttemplate: require('./'),\n\t\t\t\t\ttemplateOptions: {\n\t\t\t\t\t\tcoverage: '<%= meta.temp.integration %>/coverage.json',\n\t\t\t\t\t\treport: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'html',\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tdir: '<%= meta.temp.integration %>/html'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'cobertura',\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tdir: '<%= meta.temp.integration %>/cobertura'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text-summary'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tthresholds: {\n\t\t\t\t\t\t\tlines: 100,\n\t\t\t\t\t\t\tstatements: 100,\n\t\t\t\t\t\t\tbranches: 100,\n\t\t\t\t\t\t\tfunctions: 100\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttemplate: '<%= meta.src.test %>/html/integration.tmpl',\n\t\t\t\t\t\ttemplateOptions: {\n\t\t\t\t\t\t\thelpers: ['<%= meta.src.test %>/js/integration-helper.js']\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// test that coverage is still collected when outfile is specified, see #33\n\t\t\toutfile: {\n\t\t\t\tsrc: ['<%= meta.src.test %>/js/Generator.js'],\n\t\t\t\toptions: {\n\t\t\t\t\tspecs: ['<%= meta.src.test %>/js/GeneratorTest.js'],\n\t\t\t\t\toutfile: '.grunt/runner.html',\n\t\t\t\t\ttemplate: require('./'),\n\t\t\t\t\ttemplateOptions: {\n\t\t\t\t\t\tcoverage: '<%= meta.temp.outfile %>/coverage.json',\n\t\t\t\t\t\treport: {\n\t\t\t\t\t\t\ttype: 'text-summary'\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttemplate: '<%= meta.src.test %>/html/integration.tmpl',\n\t\t\t\t\t\ttemplateOptions: {\n\t\t\t\t\t\t\thelpers: ['<%= meta.src.test %>/js/integration-helper.js']\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// test that threshold can fail the build\n\t\t\tthreshold: {\n\t\t\t\tsrc: ['<%= meta.src.test %>/js/Generator.js'],\n\t\t\t\toptions: {\n\t\t\t\t\tspecs: ['<%= meta.src.test %>/js/GeneratorTest.js'],\n\t\t\t\t\ttemplate: require('./'),\n\t\t\t\t\ttemplateOptions: {\n\t\t\t\t\t\tcoverage: '<%= meta.temp.integration %>/coverage.json',\n\t\t\t\t\t\treport: {\n\t\t\t\t\t\t\ttype: 'text-summary'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthresholds: {\n\t\t\t\t\t\t\tlines: 101\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttemplate: '<%= meta.src.test %>/html/integration.tmpl',\n\t\t\t\t\t\ttemplateOptions: {\n\t\t\t\t\t\t\thelpers: ['<%= meta.src.test %>/js/integration-helper.js']\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tclean: {\n\t\t\ttemp: ['.grunt'],\n\t\t\tbin: ['bin']\n\t\t},\n\t\tyuidoc: {\n\t\t\tcompile: {\n\t\t\t\tname: '<%= meta.package.name %>',\n\t\t\t\tdescription: '<%= meta.package.description %>',\n\t\t\t\tversion: '<%= meta.package.version %>',\n\t\t\t\toptions: {\n\t\t\t\t\tpaths: '<%= meta.src.main %>',\n\t\t\t\t\toutdir: '<%= meta.doc %>'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\teslint: {\n\t\t\ttarget: ['<%= meta.src.main %>/js/*.js', '<%= meta.src.test %>/js/*.js'],\n\t\t\toptions: {\n\t\t\t}\n\t\t}\n\t});\n\n\tgrunt.loadNpmTasks('grunt-contrib-clean');\n\tgrunt.loadNpmTasks('grunt-contrib-jasmine');\n\tgrunt.loadNpmTasks('grunt-contrib-nodeunit');\n\tgrunt.loadNpmTasks('grunt-contrib-yuidoc');\n\tgrunt.loadNpmTasks('gruntify-eslint');\n\n\tgrunt.registerTask('report', 'Write coverage report', function () {\n\t\tvar istanbul = require('istanbul');\n\t\tvar collector = new istanbul.Collector();\n\t\tvar reporter = istanbul.Report.create('html', {\n\t\t\tdir: grunt.config.process('<%= meta.bin.coverage %>')\n\t\t});\n\t\tgrunt.file.expand(grunt.config.process('<%= meta.bin.coverage %>/coverage-*.json')).forEach(function (file) {\n\t\t\tcollector.add(grunt.file.readJSON(file));\n\t\t});\n\t\treporter.writeReport(collector, true);\n\t});\n\n\tvar WARN = grunt.warn;\n\n\tgrunt.registerTask('mock:warn:install', 'Install mock for grunt.warn()', function () {\n\t\tgrunt.warn = function(message) {\n\t\t\tgrunt.warn.message = message;\n\t\t};\n\t});\n\tgrunt.registerTask('mock:warn:uninstall', 'Uninstall mock for grunt.warn()', function () {\n\t\tgrunt.warn = WARN;\n\t});\n\n\tgrunt.registerTask('check', ['eslint']);\n\tgrunt.registerTask('doc', 'yuidoc');\n\tgrunt.registerTask('test:template', ['nodeunit:template']);\n\tgrunt.registerTask('test:reporter', ['nodeunit:reporter']);\n\tgrunt.registerTask('test:integration', ['clean:temp', 'jasmine:integration', 'nodeunit:integration']);\n\tgrunt.registerTask('test:outfile', ['clean:temp', 'jasmine:outfile', 'nodeunit:outfile']);\n\tgrunt.registerTask('test:threshold', ['clean:temp', 'mock:warn:install', 'jasmine:threshold', 'nodeunit:threshold', 'mock:warn:uninstall']);\n\tgrunt.registerTask('test', ['test:template', 'test:reporter', 'test:integration', 'test:outfile', 'test:threshold']);\n\tgrunt.registerTask('test:coverage', ['clean:bin', 'test', 'report']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-template-jasmine-istanbul/node_modules/grunt-template-jasmine-istanbul/src/main/js/reporter.js":"/* globals jasmine, phantom, __coverage__ */\n/**\n * Reports the coverage results after the test have run.\n *\n * @module grunt-template-jasmine-istanbul\n * @class reporter\n */\n(function () {\n\tvar reporter = {\n\t\t/**\n\t\t * Reports the coverage variable by dispatching a message from phantom.\n\t\t *\n\t\t * @method jasmineDone\n\t\t * @return {void}\n\t\t */\n\t\tjasmineDone: function () {\n\t\t\tif (typeof __coverage__ !== 'undefined' && __coverage__) {\n\t\t\t\tphantom.sendMessage('jasmine.coverage', __coverage__);\n\t\t\t}\n\t\t}\n\t};\n\tjasmine.getEnv().addReporter(reporter);\n})();\n"}